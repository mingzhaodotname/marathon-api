/* 
 * Marathon REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"time"
)

type AppApp struct {

	Id StringsPathId `json:"id"`

	// A list of resource roles. Marathon considers only resource offers with roles in this list for launching tasks of this app. If you do not specify this, Marathon considers all resource offers with roles that have been configured by the `--default_accepted_resource_roles` command line flag. If no `--default_accepted_resource_roles` was given on startup, Marathon considers all resource offers. To register Marathon for a role, you need to specify the `--mesos_role` command line flag on startup. If you want to assign all resources of a slave to a role, you can use the `--default_role` argument when starting up the slave. If you need a more fine-grained configuration, you can use the `--resources` argument to specify resource shares per role. See [the Mesos attribute and resources documentation](http://mesos.apache.org/documentation/latest/attributes-resources/) for details 
	AcceptedResourceRoles []string `json:"acceptedResourceRoles,omitempty"`

	// An array of strings that represents an alternative mode of specifying the command to run. This was motivated by safe usage of containerizer features like a custom Docker ENTRYPOINT. This args field may be used in place of cmd even when using the default command executor. This change mirrors API and semantics changes in the Mesos CommandInfo protobuf message starting with version `0.20.0`. Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app. 
	Args []string `json:"args,omitempty"`

	// Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks. 
	BackoffFactor float64 `json:"backoffFactor,omitempty"`

	// Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks. 
	BackoffSeconds int32 `json:"backoffSeconds,omitempty"`

	// The command that is executed.  This value is wrapped by Mesos via `/bin/sh -c ${app.cmd}`. Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app. 
	Cmd string `json:"cmd,omitempty"`

	Constraints []AppConstraintsAppConstraint `json:"constraints,omitempty"`

	Container AppAppContainerContainer `json:"container,omitempty"`

	// The number of CPU shares this application needs per instance. This number does not have to be integer, but can be a fraction.\", 
	Cpus float64 `json:"cpus,omitempty"`

	// A list of services upon which this application depends An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a. 
	Dependencies []StringsPathId `json:"dependencies,omitempty"`

	// How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction. 
	Disk float64 `json:"disk,omitempty"`

	Env AppEnvLegacyEnvVars `json:"env,omitempty"`

	// The executor to use to launch this application. Different executors are available. The simplest one (and the one configured by default if none is given) is `//cmd`, which takes the cmd and executes that on the shell level. 
	Executor string `json:"executor,omitempty"`

	// Provided URIs are passed to Mesos fetcher module and resolved in runtime.
	Fetch []AppArtifactArtifact `json:"fetch,omitempty"`

	HealthChecks []AppHealthAppHealthCheck `json:"healthChecks,omitempty"`

	// The number of instances of this application to start. Please note: this number can be changed any time as needed to scale the application. 
	Instances int32 `json:"instances,omitempty"`

	Labels AppLabelKvLabels `json:"labels,omitempty"`

	// Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks. 
	MaxLaunchDelaySeconds int32 `json:"maxLaunchDelaySeconds,omitempty"`

	// The amount of memory in MB that is needed for the application per instance. 
	Mem float64 `json:"mem,omitempty"`

	// The amount of GPU cores that is needed for the application per instance. 
	Gpus int32 `json:"gpus,omitempty"`

	IpAddress AppNetworkIpAddress `json:"ipAddress,omitempty"`

	Networks []AppNetworkNetwork `json:"networks,omitempty"`

	// An array of required port resources on the agent host. The number of items in the array determines how many dynamic ports are allocated for every task. For every port that is zero, a globally unique (cluster-wide) port is assigned and provided as part of the app definition to be used in load balancing definitions. 
	Ports []AppNumberAnyPort `json:"ports,omitempty"`

	// An array of required port resources on the agent host. The number of items in the array determines how many dynamic ports are allocated for every task. For every port definition with port number zero, a globally unique (cluster-wide) service port is assigned and provided as part of the app definition to be used in load balancing definitions. 
	PortDefinitions []AppNetworkPortDefinition `json:"portDefinitions,omitempty"`

	ReadinessChecks []AppReadinessReadinessCheck `json:"readinessChecks,omitempty"`

	Residency AppAppResidency `json:"residency,omitempty"`

	// Applies only for host networking. Normally, the host ports of your tasks are automatically assigned. This corresponds to the requirePorts value false which is the default. If you need more control and want to specify your host ports in advance, you can set requirePorts to true. This way the ports you have specified are used as host ports. That also means that Marathon can schedule the associated tasks only on hosts that have the specified ports available. 
	RequirePorts bool `json:"requirePorts,omitempty"`

	Secrets AppSecretsSecrets `json:"secrets,omitempty"`

	// Configures the number of seconds between escalating from SIGTERM to SIGKILL when signalling tasks to terminate. Using this grace period, tasks should perform orderly shut down immediately upon receiving SIGTERM. 
	TaskKillGracePeriodSeconds int32 `json:"taskKillGracePeriodSeconds,omitempty"`

	UpgradeStrategy AppUpgradeStrategy `json:"upgradeStrategy,omitempty"`

	// URIs defined here are resolved, before the application gets started. If the application has external dependencies, they should be defined here. 
	Uris []StringsUri `json:"uris,omitempty"`

	// The user to use to run the tasks on the agent.
	User string `json:"user,omitempty"`

	// The version of this definition
	Version time.Time `json:"version,omitempty"`

	VersionInfo AppVersionInfoVersionInfo `json:"versionInfo,omitempty"`

	KillSelection AppKillSelectionKillSelection `json:"killSelection,omitempty"`

	UnreachableStrategy AppUnreachableStrategyUnreachableStrategy `json:"unreachableStrategy,omitempty"`

	// Describes the information about (pseudo) TTY that can be attached to the process of this container. 
	Tty AppContainerCommonsTty `json:"tty,omitempty"`
}
